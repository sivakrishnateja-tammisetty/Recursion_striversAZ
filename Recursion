Recursion: when a function calls itself untill a specific condition is met.



Eg:print name N times using recursion
#include <iostream>

using namespace std;
void fun(int i,int n)
{
    if(i>n)return;
    cout<<"Hey Siva!"<<endl;
    fun(i+1,n);
}
int main()
{
    int n;
    cin>>n;
    fun(1,n);

    return 0;
}

o/p:
4
Hey Siva!
Hey Siva!
Hey Siva!
Hey Siva!


Eg: Print Linearly from 1 to N

#include <iostream>

using namespace std;
void fun(int i,int n)
{
    if(i>n)return;
    cout<<i<<endl;
    fun(i+1,n);
}
int main()
{
    int n;
    cin>>n;
    fun(1,n);

    return 0;
}
o/p:
4
1
2
3
4



Eg: print N to 1
#include <iostream>

using namespace std;
void fun(int i,int n)
{
    if(i<1)return;
    cout<<i<<endl;
    fun(i-1,n);
}
int main()
{
    int n;
    cin>>n;
    fun(n,n);

    return 0;
}
o/p:
4
4
3
2
1




Eg:print sum of N numbers using recursion(using parameterized)

#include <iostream>

using namespace std;
void fun(int n,int sum)
{
    if(n<1)
    {
        cout<<sum<<endl;
        return;
    }
    fun(n-1,sum+n);
}

int main()
{
    int n;
    cout<<"Enter n value:";
    cin>>n;
    fun(n,0);

    return 0;
}

o/p:
Enter n value:3
6


* using functional:

#include <iostream>

using namespace std;
int  fun(int n)
{
    if(n==0)return 0;
    else return n+fun(n-1);
}

int main()
{
    int n;
    cout<<"Enter n value:";
    cin>>n;
    cout<<fun(n);

    return 0;
}
o/p:
Enter n value:3
6





Eg: Factorial of a number using recursion

#include <iostream>

using namespace std;
int factorial(int n)
{
    if(n==0)return 1;
    else return n*factorial(n-1);
}

int main()
{
    int n;
    cout<<"Enter n value:";
    cin>>n;
    cout<<factorial(n);

    return 0;
}

o/p:
Enter n value:5
120




Eg: Reverse an array using recursion


#include <iostream>

using namespace std;
void rev_array(int i,int *a,int n)
{
    if(i>=n/2)return;
    swap(a[i],a[n-i-1]);
    rev_array(i+1,a,n);
}

int main()
{
   int a[]={1,2,3};
   int n=3;
   rev_array(0,a,n);
   for(int i=0;i<n;i++){cout<<a[i]<<" ";}

    return 0;
}
o/p:
3 2 1



Eg: whether given string is palindrome or not using recursion
include <iostream>
using namespace std;
bool palindrome(int i,string &s)
{
    if(i>=(s.size())/2)return true;
    if(s[i]!=s[s.size()-i-1])return false;
    return palindrome(i+1,s);
}
int main()
{
   string name="madam";
   cout<<palindrome(0,name);

    return 0;
}
o/p:1



Eg: fibnoacci series of given term using recursion
#include <iostream>
using namespace std;
int fibo(int n)
{
    if(n<=1)return n;
    return fibo(n-1)+fibo(n-2);
}
int main()
{
   int n=4;
   cout<<fibo(n);

    return 0;
}
o/p:
3







#include <iostream>
using namespace std;
int fibo(int n)
{
    if(n<=1)return n;
    return fibo(n-1)+fibo(n-2);
}
int main()
{
  
   for(int i=0;i<10;i++)
   {
   cout<<fibo(i)<<" ";
   }

    return 0;
}

o/p:
0 1 1 2 3 5 8 13 21 34
